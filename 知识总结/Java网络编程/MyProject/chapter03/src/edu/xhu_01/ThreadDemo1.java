package edu.xhu_01;

/*
 *1、进程：
 * 	操作系统调度任务的基本单位。
 * 	它表示一个正在被执行的程序。
 * 	它有独立的内存资源和系统资源 
 *2、多进程：
 *	单进程：表示在一个时间里只能执行一个用户程序，一个程序执行完了才能执行下一个程序
 *	多进程：表示操作系统在一个时间里可以执行多个任务（执行多个程序）
 * 	CPU采用分时执行各个程序，对用户来说，由于CPU执行速度很快，感觉所有的任务都在同时执行
 * 	多进程的存在是为了提高CPU的使用率
 *3、线程：
 *	线程是进程的执行单位，一个进程在执行时首先启动一个主线程（默认线程名称为main），执行main()的代码。
 *	若一个程序在同一时间需要执行多个任务，这时需要使用线程完成。
 *4、多线程：
 *	单线程：一个程序在某一时间只有一条执行路径
 *	多线程：一个程序在某一时间有多条执行路径。
 *5、多线程的意义：
 *		使用多线程不是为了提高程序的执行效率，而是为了提高程序的使用效率。特别是在网络程序中，
 *		若只有一个线程处理请求，只有一条执行路径，可能会处于等待状态而不能处理其他的请求，
 *		为了提高该程序的使用率，可以使用多线程。 
 * 	程序的执行都是在抢夺CPU资源，即CPU执行权。若一个程序有多个线程去抢夺执行权，则抢到的可能性会提高。
 *  但要注意的是：哪个线程抢到执行权是随机的，因此线程的执行具有随机性。
 *举例：迅雷下载，快播、扫雷程序
 *
 *Java运行程序原理：
 *	由java命令启动JVM,JVM的启动相当于一个进程开始执行了。接着该进程立即开始创建一个main线程，开始
 *	执行main方法
 *Java虚拟机启动本身也是多线程，一个线程在执行程序，还有一个线程在回收垃圾。
 *
 *需求：实现多线程
 *	Java是通过调用C/C++写好的程序来实现多线程，而C/C++这是通过调用系统功能来完成。
 *	Java提供了一个Thread类，封装了实现过程，
 *方法1：
 *	A:编写一个Thread的子类MyThread;
 *	B:重写Thread类的run()方法；
 *	C:创建该子类MyThread的对象;
 *	D:启动线程
 */
public class ThreadDemo1 {
	public static void main(String[] args) {
		//C:
		MyThread mt=new MyThread();
		//mt.run();   //执行了循环，但是是多线程吗？不是，这是普通的执行方式。还是在main()线程里执行
		//mt.run();   //可以看出是上一个方法执行完了，才执行下一个方法，是一条执行路径，顺序执行
						//而多线程是多条路径，每条路径的执行权是随机的
		mt.start();   //这个才是新创建了一个线程，并在线程中执行run()方法
		//mt.start();  //IllegalThreadStateException 线程状态异常？mt线程被启动了两次，
						//而不是启动了两个线程，若要启动两个线程，则需要创建两个线程对象，分别启动
		MyThread mt1=new MyThread();
		mt1.start();    //我怎么知道输出是哪个线程的输出呢？见实例2
	}
}
