网络编程中经常遇到的两个术语：
1、阻塞与非阻塞：
       客观世界中，阻塞与非阻塞的意思表示做某件事需不需要等待，若需要等待，则称为阻塞，否则称为非阻塞
计算机技术中，有很多操作是需要等待的，IO操作，线程调度等操作
下面主要讲IO阻塞：
       应用程序的IO操作，也称为读写操作，它是交给操作系统来完成的，操作系统的操作我们成为kernel(核心或底层)操作。
从理论上讲，所有的IO都是阻塞的。因此，我们要讨论的阻塞和非阻塞是针对应用程序在等待kernel为我们准备IO数据期间的行为，是等待还是不等待。
若等待，则称为阻塞，不等待则称为非阻塞。
2、同步与异步：
       客观世界的同步与异步的意思是，一个任务要由很多小任务完成，这些小任务之间有没有依赖关系，若有依赖关系，则需要同步，若没有依赖关系则可以异步。
比如生产和消费关系是一个同步关系，一个完成了，才能做下一个，不能同时做。而要做一桌菜，蒸馒头和做凉菜，它们之间没有依赖关系，在做凉菜的时候，
没有完成凉菜的制作也可以开始蒸馒头，可以异步操作。
       我们这里要讲的同步和异步是指在处理阻塞时，线程程序是等待还是不等待，若等待则称为同步，不等待称为异步。
       同步过程中进程触发IO操作并等待(也就是我们说的阻塞)或者轮询的去查看IO操作(也就是我们说的非阻塞)是否完成。
       异步过程中进程触发IO操作以后，直接返回，做自己的事情，IO交给内核来处理，完成后内核通知进程IO完成。
       
       同步和异步针对应用程序来，关注的是程序中间的协作关系；阻塞与非阻塞更关注的是单个进程的执行状态。
      
       同步有阻塞和非阻塞之分，异步没有，它一定是非阻塞的。 
       用户线程在操作IO的时候根本不去考虑IO的执行等待，全部都交给CPU去完成，而自己只等待一个完成信号的时候，才是真正的异步IO。
       所以，拉一个子线程去轮询、去死循环，或者使用select、poll、epoll，都不是异步。java1.7后提供的AIO才是异步IO。
      
同步：执行一个操作之后，进程触发IO操作并等待(也就是我们说的阻塞)或者轮询的去查看IO操作(也就是我们说的非阻塞)是否完成，等待结果，
然后才继续执行后续的操作。
异步：执行一个操作后，可以去执行其他的操作，然后等待通知再回来执行刚才没执行完的操作。
阻塞：进程给CPU传达一个任务之后，一直等待CPU处理完成，然后才执行后面的操作。
非阻塞：进程给CPU传达任务后，继续处理后续的操作，隔断时间再来询问之前的操作是否完成。这样的过程其实也叫轮询。
       
高性能IO模型分析 

服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种：

（1）同步阻塞IO（Blocking IO）：即传统的IO模型。

（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。
	注意这里所说的NIO并非Java的NIO（New IO）库。

（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，Java中的Selector和Linux中的epoll都是这种模型。
	同步非阻塞IO中，一定要采用多路复用，即一个线程要处理多个通道，每个通道都可能有读写等待时，若某一通道处于等待状态，它可以处理其他通道
	的IO请求，这时非阻塞才体现出它的意义。若一个线程处理一个通道，即使采用非阻塞IO，线程可以干其他事情，但可能没有其他事情可干，
	还是处于等待状态，只是等待的方式不一样而已。

（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步IO，一定是非阻塞。 

为了方便描述，我们统一使用IO的读操作作为示例。
    
